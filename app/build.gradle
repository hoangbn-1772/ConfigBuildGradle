apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

/**
 * apply plugin jacoco
 */
apply plugin: 'jacoco'

/**
 * version Jacoco, Correct version is set in build.gradle file
 */
jacoco{
    toolVersion = '0.8.1'
}

tasks.withType(Test){
    jacoco.includeNoLocationClasses = true
}

/**
 * Create task jacocoTestReport
 */
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [ '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*' ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.gradlesample"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        /**
         * Enable code coverage for instrumented tests
         */
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }

        debug{
            applicationIdSuffix ".debug"
            testCoverageEnabled true
        }
    }

    /**
     * Define different app version
     */
    flavorDimensions "version", "api"
    productFlavors{
        admin{
            dimension "version"
            applicationIdSuffix ".admin"
            versionNameSuffix "-admin"
        }

        customer{
            dimension "version"
            applicationIdSuffix ".customer"
            versionNameSuffix "-customer"
        }

        demo{
            dimension "api"
        }
    }

    /**
     * Enable tests coverage for UnitTests
     */
    testOptions{
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
}

buildscript {
    ext.kotlin_version = '1.3.31'
    repositories {
        google()
        jcenter()

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        /**
         * Add Jacoco version
         */
        classpath "org.jacoco:org.jacoco.core:0.8.1"
    }
}

allprojects {
    repositories {
        google()
        jcenter()

    }
}